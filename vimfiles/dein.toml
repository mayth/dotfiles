[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'Shougo/vimshell.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
                \ 'colorscheme': 'hybrid',
                \ 'active': {
                \   'left': [
                \       [ 'mode', 'paste' ],
                \       [ 'pyenv' ],
                \       [ 'filename' ]
                \   ],
                \   'right': [
                \       [ 'syntastic', 'lineinfo' ],
                \       [ 'percent' ],
                \       [ 'fileformat', 'fileencoding', 'filetype' ],
                \       [ 'fugitive' ]
                \   ]
                \ },
                \ 'component_expand': {
                \   'syntastic': 'SyntasticStatuslineFlag'
                \ },
                \ 'component_type': {
                \   'syntastic': 'error'
                \ },
                \ 'component_function': {
                \   'pyenv': 'pyenv#statusline#component',
                \   'filename': 'MyFilename',
                \   'fugitive': 'MyFugitive'
                \ }
                \ }

    function! MyModified()
        return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction

    function! MyReadonly()
        return &ft !~? 'help' && &readonly ? 'RO' : ''
    endfunction

    function! MyFilename()
        let fname = expand('%:t')
        return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
            \ ('' != fname ? fname : '[No Name]') .
            \ ('' != MyModified() ? ' ' . MyModified() : '')
    endfunction

    function! MyFugitive()
        return exists('*fugitive#head') ? fugitive#head() : ''
    endfunction
'''

[[plugins]]
repo = 'w0ng/vim-hybrid'

[[plugins]]
repo = 'cocopon/lightline-hybrid.vim'
depends = ['itchyny/lightline.vim', 'w0ng/vim-hybrid']

[[plugins]]
repo = 'Shougo/neocomplete.vim'
hook_add = '''
    " neocomplete.vim configuration from the sample:
    " https://github.com/Shougo/neocomplete.vim/blob/9cf52cfad47bf0f7acfcc5cf72d2f771a86c0fe2/README.md

    " Disable AutoComplPop.
    let g:acp_enableAtStartup = 0
    " Use neocomplete.
    let g:neocomplete#enable_at_startup = 1
    " Use smartcase.
    let g:neocomplete#enable_smart_case = 1
    " Set minimum syntax keyword length.
    let g:neocomplete#sources#syntax#min_keyword_length = 3
    let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

    " Define dictionary.
    let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : ''
    \ }

    " Define keyword.
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " Plugin key-mappings.
    inoremap <expr><C-g>     neocomplete#undo_completion()
    inoremap <expr><C-l>     neocomplete#complete_common_string()

    " Recommended key-mappings.
    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
    return neocomplete#close_popup() . "\<CR>"
    " For no inserting <CR> key.
    "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
    endfunction
    " <TAB>: completion.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><C-y>  neocomplete#close_popup()
    inoremap <expr><C-e>  neocomplete#cancel_popup()
    " Close popup by <Space>.
    "inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

    " Enable omni completion.
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
    endif
    "let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    "let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
    "let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
'''

[[plugins]]
repo = 'Shougo/neosnippet'
hook_add = '''
    " Example configuration from neosnippet.vim README

    " Plugin key-mappings.
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)

    " SuperTab like snippets behavior.
    imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)"
    \: pumvisible() ? "\<C-n>" : "\<TAB>"
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)"
    \: "\<TAB>"

    " For snippet_complete marker.
    if has('conceal')
        set conceallevel=2 concealcursor=niv
    endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
    let g:indent_guides_enable_on_vim_startup = 1
    let g:indent_guides_start_level = 2
    let g:indent_guides_guide_size = 1
    if !has('gui_running')
        let g:indent_guides_auto_colors = 0
        hi IndentGuidesOdd ctermbg=236
        hi IndentGuidesEven ctermbg=238
    endif
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'scrooloose/nerdtree'

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
depends = ['scrooloose/nerdtree']

[[plugins]]
repo = 'sudo.vim'

[[plugins]]
repo = 'fuenor/JpFormat.vim'
hook_add = '''
    set formatexpr=jpfmt#formatexpr()
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'vim-scripts/Align'

[[plugins]]
repo = 'vim-scripts/PreserveNoEOL'

[[plugins]]
repo = 'Konfekt/FastFold'


### Development
[[plugins]]
repo = 'scrooloose/syntastic'
depends = ['itchyny/lightline.vim']
hook_add = '''
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 0
    let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wq = 0

    if exists('g:lightline')
        let g:syntastic_mode_map = { 'mode': 'passive' }
        augroup AutoSyntastic
            autocmd!
            autocmd BufWritePost * call s:syntastic()
        augroup END
        function! s:syntastic()
            SyntasticCheck
            call lightline#update()
        endfunction
    endif
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'thinca/vim-ref'

[[plugins]]
repo = 'tpope/vim-endwise'
