### Added by Zinit's installer
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
  print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
  command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
  command git clone https://github.com/zdharma-continuum/zinit "$HOME/.zinit/bin" && \
    print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
    print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
  zdharma-continuum/z-a-rust \
  zdharma-continuum/z-a-as-monitor \
  zdharma-continuum/z-a-patch-dl \
  zdharma-continuum/z-a-bin-gem-node

### End of Zinit's installer chunk

if [[ -z "$XDG_CONFIG_HOME" ]]; then
  export XDG_CONFIG_HOME=$HOME/.config
fi

# plugins
zinit light mollifier/anyframe
zinit ice lucid wait''; zinit light zsh-users/zsh-completions
zinit ice lucid wait''; zinit light zsh-users/zsh-autosuggestions
zinit ice lucid wait''; zinit light zdharma-continuum/fast-syntax-highlighting
zinit ice lucid wait''; zinit light zdharma-continuum/history-search-multi-word
# zinit ice lucid wait''; zinit light b4b4r07/enhancd
zinit ice lucid wait''; zinit light paulirish/git-open

autoload -Uz compinit && compinit
zstyle ':completion:*:default' menu select=1 

# Enable Homwbrew for Apple Silicon
if [ -x /opt/homebrew/bin/brew ]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
fi

# Enable Homebrew for Linux
if [ -x /home/linuxbrew/.linuxbrew/bin/brew ]; then
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

# gpg-agent
if command -v gpg > /dev/null; then
  gpgconf --launch gpg-agent
  export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
fi

# iTerm2 integration
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# anyenv
command -v anyenv > /dev/null && eval "$(anyenv init -)"

# pyenv
if command -v pyenv > /dev/null && [ -d $(pyenv root)/plugins/pyenv-virtualenv ]; then
  eval "$(pyenv virtualenv-init -)"
fi

# rust
test -e $HOME/.cargo/env && source $HOME/.cargo/env

# starship
if command -v starship > /dev/null; then
  eval "$(starship init zsh)"
fi

# <3
bindkey -e
bindkey '^xr' anyframe-widget-execute-history
bindkey '^x^r' anyframe-widget-execute-history
bindkey '^xk' anyframe-widget-kill
bindkey '^x^k' anyframe-widget-kill

setopt no_beep
setopt no_hist_beep
setopt no_list_beep
setopt magic_equal_subst
setopt auto_pushd

export HISTSIZE=10000
export HISTFILE="$HOME/.zsh_history"
export SAVEHIST=$HISTSIZE
setopt append_history
setopt share_history
setopt hist_expand
setopt hist_no_store
setopt hist_ignore_all_dups
setopt hist_ignore_space
setopt hist_reduce_blanks

setopt extendedglob

# global path config
typeset -U path cdpath fpath manpath
typeset -xT LD_LIBRARY_PATH ld_library_path
typeset -U ld_library_path
typeset -xT PKG_CONFIG_PATH pkg_config_path
typeset -U pkg_config_path
[[ -z "$sudo_path" ]] && typeset -xT SUDO_PATH sudo_path
typeset -U sudo_path
sudo_path=({,/usr,/usr/local}/sbin(N-/))

# ls
if [[ "$(uname)" == "Darwin" ]]; then
  export LSCOLORS=ExGxFxdxCxDxDxxbadacec
  alias ls='ls -GF'
else
  if [[ -r "${HOME}/.colorrc" ]]; then
    eval `dircolors "${HOME}/.colorrc"`
  fi
  alias ls='ls -F --color=auto'
fi

# alias
if command -v eza > /dev/null; then
  alias eza='eza --icons'
  alias ls='eza'
fi
command -v bat > /dev/null && alias cat='bat'
command -v procs > /dev/null && alias ps='procs'
command -v rg > /dev/null && alias grep='rg'
# command -v fd > /dev/null && alias find='fd'
command -v hexyl > /dev/null && alias od='hexyl'

# we need vim
if command -v nvim > /dev/null; then
  EDITOR=nvim
elif command -v vim > /dev/null; then
  EDITOR=vim
elif command -v vi > /dev/null; then
  EDITOR=vi
elif command -v nano > /dev/null; then
  EDITOR=nano
fi
export EDITOR

command -v direnv > /dev/null && eval "$(direnv hook zsh)"

# fzf
command -v fzf > /dev/null && test -e "$HOME/.zsh/fzf.zsh" && source $HOME/.zsh/fzf.zsh

# load machine-local config
[ -f ~/.zshrc.local ] && source ~/.zshrc.local

# Android SDK on Homebrew for Apple Silicon
if [ -d /opt/homebrew/share/android-commandlinetools ]; then
  export ANDROID_SDK_HOME=/opt/homebrew/share/android-commandlinetools
  path=($ANDROID_SDK_HOME/platform-tools(N-/) $path)
fi

# .NET Core SDK tools
path=($path $HOME/.dotnet/tools(N-/))

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="/Users/mayth/.sdkman"
[[ -s "/Users/mayth/.sdkman/bin/sdkman-init.sh" ]] && source "/Users/mayth/.sdkman/bin/sdkman-init.sh"

# vim: et ts=2 sts=0 sw=2 ft=zsh
