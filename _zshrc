### Added by Zinit's installer
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
  print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
  command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
  command git clone https://github.com/zdharma-continuum/zinit "$HOME/.zinit/bin" && \
    print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
    print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
  zdharma-continuum/z-a-rust \
  zdharma-continuum/z-a-as-monitor \
  zdharma-continuum/z-a-patch-dl \
  zdharma-continuum/z-a-bin-gem-node

### End of Zinit's installer chunk

if [[ -z "$XDG_CONFIG_HOME" ]]; then
  export XDG_CONFIG_HOME=$HOME/.config
fi

# plugins
zinit ice lucid wait''; zinit light zsh-users/zsh-completions
zinit ice lucid wait''; zinit light zsh-users/zsh-autosuggestions
zinit ice lucid wait''; zinit light zdharma-continuum/fast-syntax-highlighting
zinit ice lucid wait''; zinit light zdharma-continuum/history-search-multi-word
zinit ice lucid wait''; zinit light b4b4r07/enhancd
zinit ice lucid wait''; zinit light mollifier/anyframe

autoload -Uz compinit && compinit
zstyle ':completion:*:default' menu select=1 

# iTerm2 integration
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

# starship
if command -v starship > /dev/null; then
  eval "$(starship init zsh)"
fi

# <3
bindkey -e

setopt no_beep
setopt no_hist_beep
setopt no_list_beep
setopt magic_equal_subst
setopt auto_pushd

export HISTSIZE=10000
export HISTFILE="$HOME/.zsh_history"
export SAVEHIST=$HISTSIZE
setopt append_history
setopt share_history
setopt hist_expand
setopt hist_no_store
setopt hist_ignore_all_dups
setopt hist_ignore_space
setopt hist_reduce_blanks

setopt extendedglob

# global path config
typeset -U path cdpath fpath manpath
typeset -xT LD_LIBRARY_PATH ld_library_path
typeset -U ld_library_path
typeset -xT PKG_CONFIG_PATH pkg_config_path
typeset -U pkg_config_path
[[ -z "$sudo_path" ]] && typeset -xT SUDO_PATH sudo_path
typeset -U sudo_path
sudo_path=({,/usr,/usr/local}/sbin(N-/))

# ls
if [[ "$(uname)" == "Darwin" ]]; then
  export LSCOLORS=ExGxFxdxCxDxDxxbadacec
  alias ls='ls -GF'
else
  if [[ -r "${HOME}/.colorrc" ]]; then
    eval `dircolors "${HOME}/.colorrc"`
  fi
  alias ls='ls -F --color=auto'
fi

# we need vim
if command -v nvim > /dev/null; then
  EDITOR=nvim
elif command -v vim > /dev/null; then
  EDITOR=vim
elif command -v vi > /dev/null; then
  EDITOR=vi
elif command -v nano > /dev/null; then
  EDITOR=nano
fi
export EDITOR

command -v direnv > /dev/null && eval "$(direnv hook zsh)"

# load machine-local config
[ -f ~/.zshrc.local ] && source ~/.zshrc.local

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="/Users/mayth/.sdkman"
[[ -s "/Users/mayth/.sdkman/bin/sdkman-init.sh" ]] && source "/Users/mayth/.sdkman/bin/sdkman-init.sh"

# vim: et ts=2 sts=0 sw=2 ft=zsh
